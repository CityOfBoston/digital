Description: Search indexer for 311 cases

Parameters:
  ClusterStack:
    Type: String
    Description: Our main stack. Expected to have Cluster, ConfigBucket, Namespace, and ServiceRoleArn outputs
    Default: DigitalAppsCluster

  ShortName:
    Type: String
    Default: 311-indexer

  CloudFormationTemplatesBucket:
    Type: String
    Description: Bucket for our CloudFormationTemplates
    Default: test-cob-cloudformation-templates

  DeployTemplate:
    Type: String
    Description: Template in the deploy.zip for our service
    Default: default-worker-service.yml

  ServiceDesiredCount:
    Type: Number
    Description: Update this and redeploy to change the number of instances of the service
    Default: 0

  GitHubRepo:
    Type: String
    Description: Repo name for the code. E.g. CityOfBoston/registry-certs
    Default: CityOfBoston/311-indexer

  GitHubBranch:
    Type: String
    Description: Branch name to check for updates and deploy from
    Default: develop

  GitHubToken:
    Type: String
    Description: Access token for a user who has read access to the repos
    NoEcho: true

  ElasticsearchPolicyArn:
    Type: String 
    Description: ARN for the managed policy that gives us Elasticsearch access

Resources:
  CommonResources:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        ClusterStack: !Ref ClusterStack
        AppStack: !Ref AWS::StackName
        ShortName: !Ref ShortName
        TaskPolicyArnsString: !Join [',', [!Ref ElasticsearchPolicyArn]]
      TemplateURL: !Sub 'https://${CloudFormationTemplatesBucket}.s3.amazonaws.com/service/common-resources.yml'

  DeployPipeline:
    Type: "AWS::CloudFormation::Stack"
    # CommonResources needs to populate some exports
    DependsOn: CommonResources
    Properties:
      Parameters:
        ClusterStack: !Ref ClusterStack
        AppStack: !Ref AWS::StackName
        ShortName: !Ref ShortName
        GitHubRepo: !Ref GitHubRepo
        GitHubBranch: !Ref GitHubBranch
        GitHubToken: !Ref GitHubToken
        DeployTemplatesBucket: !Ref CloudFormationTemplatesBucket
        DeployTemplate: !Ref DeployTemplate
        ServiceDesiredCount: !Ref ServiceDesiredCount
      TemplateURL: !Sub 'https://${CloudFormationTemplatesBucket}.s3.amazonaws.com/service/deploy-pipeline.yml'

  Dashboard:
    Type: "AWS::CloudWatch::Dashboard"
    Properties:
      DashboardName: !Ref AWS::StackName
      DashboardBody:
        Fn::Sub:
          - |
            {
              "widgets": [
                {
                  "type": "text",
                  "x": 0,
                  "y": 0,
                  "width": 12,
                  "height": 6,
                  "properties": {
                    "markdown": "${Markdown}"
                  }
                },
                {
                  "type": "metric",
                  "x": 12,
                  "y": 0,
                  "width": 12,
                  "height": 6,
                  "properties": ${InstancesDashboardMetricJson}
                },
                {
                  "type": "metric",
                  "x": 0,
                  "y": 6,
                  "width": 12,
                  "height": 3,
                  "properties": ${CpuDashboardMetricJson}
                },
                {
                  "type": "metric",
                  "x": 12,
                  "y": 6,
                  "width": 12,
                  "height": 3,
                  "properties": ${MemoryDashboardMetricJson}
                },
                {
                  "type": "metric",
                  "x": 0,
                  "y": 9,
                  "width": 12,
                  "height": 6,
                  "properties": {
                    "title": "Salesforce Messages",
                    "view": "timeSeries",
                    "stacked": false,
                    "metrics": [
                      [ 
                        "${AWS::StackName}", "SalesforceConnectSuccessful",
                        {
                          "stat": "Sum",
                          "label": "Reconnect"
                        }
                      ],
                      [ 
                        "${AWS::StackName}", "SalesforceTopicMessage",
                        {
                          "stat": "Sum",
                          "label": "Event"
                        }
                      ]
                    ],
                    "region": "${AWS::Region}",
                    "yAxis": {
                      "left": { "min": 0 }
                    }
                  }
                },
                {
                  "type": "metric",
                  "x": 12,
                  "y": 9,
                  "width": 12,
                  "height": 6,
                  "properties": {
                    "title": "Queue Lengths",
                    "view": "timeSeries",
                    "stacked": false,
                    "metrics": [
                      [ 
                        "${AWS::StackName}", "LoadCasesQueueLength",
                        {
                          "stat": "Average",
                          "label": "load cases"
                        }
                      ]
                    ],
                    "region": "${AWS::Region}",
                    "yAxis": {
                      "left": { "min": 0 }
                    }
                  }
                }

              ]
            }
          - Markdown:
              Fn::Join:
                - '\n'
                - Fn::Split:
                  - "\n"
                  - Fn::Sub:
                    - |
                      # 311 Indexer
                      Service to take updates from Salesforce and index them in Elasticsearch.

                      &nbsp;

                      ${ServiceLinks}

                    - ServiceLinks: !GetAtt CommonResources.Outputs.ServiceLinksMarkdown
            InstancesDashboardMetricJson: !GetAtt CommonResources.Outputs.InstancesDashboardMetricJson
            CpuDashboardMetricJson: !GetAtt CommonResources.Outputs.CpuDashboardMetricJson
            MemoryDashboardMetricJson: !GetAtt CommonResources.Outputs.MemoryDashboardMetricJson


  # ${ServiceLinks}

  ###### CUSTOM RESOURCES TO THIS APP ######

  # Sets up a metric based on the successful "connect" messages printed into the
  # logs when the hand-over-hand streaming library reconnects. We can make a
  # metric from these log lines and then make an alert if it drops below a
  # threshold, which means the connection to Salesforce has failed.
  SalesforceConnectSuccessfulFilter:
    Type: "AWS::Logs::MetricFilter"
    Properties: 
      FilterPattern: '{($.channel = "/meta/connect") && ($.successful IS TRUE )}'
      LogGroupName: !GetAtt CommonResources.Outputs.LogGroupName
      MetricTransformations:
        - MetricName: SalesforceConnectSuccessful
          MetricNamespace: !Ref AWS::StackName
          MetricValue: 1

  SalesforceTopicMessageFilter:
    Type: "AWS::Logs::MetricFilter"
    Properties: 
      FilterPattern: '{($.channel = "/topic/*")}'
      LogGroupName: !GetAtt CommonResources.Outputs.LogGroupName
      MetricTransformations:
        - MetricName: SalesforceTopicMessage
          MetricNamespace: !Ref AWS::StackName
          MetricValue: 1

  # Alert for the above metric. The reconnects happen every 110 seconds, so we
  # smooth things out to want to see at least 1 in a 5 minute period. (The
  # frequency is less important than whether they're happening at all.)
  LowSalesforceConnectSuccessfulAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmName: !Sub '${AWS::StackName} low successful reconnects to Salesforce'
      AlarmDescription: The reconnect metric is too low
      MetricName: SalesforceConnectSuccessful
      Namespace: !Ref AWS::StackName
      Dimensions: []
      Statistic: Sum
      ComparisonOperator: LessThanThreshold
      Threshold: 1
      Period: 300
      EvaluationPeriods: 1
      TreatMissingData: breaching
      ActionsEnabled: true
      AlarmActions:
        - Fn::ImportValue:
            !Sub '${ClusterStack}:AlarmTopicArn'
      OKActions:
        - Fn::ImportValue:
            !Sub '${ClusterStack}:AlarmTopicArn'

  LoadCasesQueueLengthFilter:
    Type: "AWS::Logs::MetricFilter"
    Properties: 
      FilterPattern: '{($.type = "queue length") && ($.stage = "load-cases")}'
      LogGroupName: !GetAtt CommonResources.Outputs.LogGroupName
      MetricTransformations:
        - MetricName: LoadCasesQueueLength
          MetricNamespace: !Ref AWS::StackName
          MetricValue: "$.length"

  IndexCasesQueueLengthFilter:
    Type: "AWS::Logs::MetricFilter"
    Properties: 
      FilterPattern: '{($.type = "queue length") && ($.stage = "index-cases")}'
      LogGroupName: !GetAtt CommonResources.Outputs.LogGroupName
      MetricTransformations:
        - MetricName: IndexCasesQueueLength
          MetricNamespace: !Ref AWS::StackName
          MetricValue: "$.length"
