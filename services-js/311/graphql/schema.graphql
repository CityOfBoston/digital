input CreateRequestAttribute {
  code: String!
  value: String!
}

input LatLng {
  lat: Float!
  lng: Float!
}

type Mutation {
  createRequest(code: String!, description: String!, firstName: String, lastName: String, email: String, phone: String, address: String, location: LatLng, attributes: [CreateRequestAttribute!]!): Request!
}

type Query {
  services: [Service!]!
  service(code: String!): Service
  request(id: String!): Request
}

type Request {
  id: String!
  service: Service!
  description: String
  status: String!
  address: String
  requestedAt: Int!
  updatedAt: Int!
  requestedAtString(format: String): String!
  updatedAtString(format: String): String!
}

type Service {
  code: String!
  name: String!
  attributes: [ServiceAttribute!]!
  locationRequired: Boolean!
  contactRequired: Boolean!
}

type ServiceAttribute {
  type: ServiceAttributeDatatype!
  required: Boolean!
  description: String!
  code: String!
  dependencies: ServiceAttributeConditional
  values: [ServiceAttributeValue!]
  conditionalValues: [ServiceAttributeConditionalValues!]
}

type ServiceAttributeCondition {
  attribute: String!
  op: ServiceAttributeConditionalOp!
  value: ServiceAttributeConditionValue!
}

type ServiceAttributeConditional {
  clause: ServiceAttributeConditionalClause!
  conditions: [ServiceAttributeCondition!]!
}

enum ServiceAttributeConditionalClause {
  AND
  OR
}

enum ServiceAttributeConditionalOp {
  eq
  neq
  in
  gt
  gte
  lt
  lte
}

type ServiceAttributeConditionalValues {
  dependentOn: ServiceAttributeConditional!
  values: [ServiceAttributeValue!]!
}

type ServiceAttributeConditionValue {
  type: ServiceAttributeConditionValueType
  string: String
  array: [String!]
  number: Float
}

enum ServiceAttributeConditionValueType {
  STRING
  STRING_ARRAY
  NUMBER
}

enum ServiceAttributeDatatype {
  BOOLEAN_CHECKBOX
  INFORMATIONAL
  MULTIVALUELIST
  NUMBER
  DATETIME
  DATE
  SINGLEVALUELIST
  STRING
  TEXT
}

type ServiceAttributeValue {
  key: String!
  name: String!
}
