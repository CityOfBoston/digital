// flow-typed signature: 754e5aa17b576dd3164059d80b7e5202
// flow-typed version: <<STUB>>/mapbox-gl_v0.37.0/flow_v0.46.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'mapbox-gl'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

declare module 'mapbox-gl' {
  declare export var accessToken: string;

  declare type Position = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';

  declare export class Point {
    constructor(x: number, y: number): this;

    x: number;
    y: number;

    clone(): Point;

    add(p: Point): Point;
    sub(p: Point): Point;
    // ... there are more but we don't really need them. See point-geometry.
  }

  declare export type PointLike = Point | [number, number];

  declare export class LngLat {
    constructor(lng: number, lat: number): this;

    lng: number;
    lat: number;

    static convert(input: [number, number]): LngLat;

    wrap(): LngLat;
    toArray(): [number, number];
    toString(): string;
  }

  declare export type LngLatLike = LngLat | [number, number];

  declare export class LngLatBounds {
    constructor(sw?: LngLatLike, ne?: LngLatLike): this;

    sw: LngLat;
    ne: LngLat;

    setNorthEast(ne: LngLatLike): this;
    setSoundWest(sw: LngLatLike): this;
    extend(obj: LngLat | LngLatBounds): this;
    getCenter(): LngLat;
    getSouthWest(): LngLat;
    getNorthEast(): LngLat;
    getNorthWest(): LngLat;
    getSouthEast(): LngLat;
    getWest(): number;
    getSouth(): number;
    getEast(): number;
    getNorth(): number;
    toArray(): [[number, number], [number, number]];
    toString(): string;
  }

  declare export type LngLatBoundsLike = LngLatBounds | [LngLatLike, LngLatLike];

  declare export type MapOptions = {|
    container: HTMLElement | string,
    minZoom?: number,
    maxZoom?: number,
    style?: Object | string,
    hash?: boolean,
    interactive?: boolean,
    bearingSnap?: number,
    classes?: Array<string>,
    attributionControl?: boolean,
    logoPosition?: Position,
    failIfMajorPerformanceCaveat?: boolean,
    preserveDrawingBuffer?: boolean,
    refreshExpiredTiles?: boolean,
    maxBounds?: LngLatBoundsLike,
    scrollZoom?: boolean,
    boxZoom?: boolean,
    dragRotate?: boolean,
    dragPan?: boolean,
    keyboard?: boolean,
    doubleClickZoom?: boolean,
    touchZoomRotate?: boolean | Object,
    trackResize?: boolean,
    center?: LngLatLike,
    zoom?: number,
    bearing?: number,
    pitch?: number,
    renderWorldCopies?: boolean,
  |}

  declare export interface IControl {}

  declare type ClassChangeOptions = {|
    transition?: boolean,
  |};

  declare type ImageOptions = {|
    width: number,
    height: number,
    pixelRatio: number,
  |};

  declare type AnimationOptions = {|
    duration?: number,
    easing?: (time: number) => number,
    offset?: PointLike,
    animate?: boolean,
  |};

  declare type CameraOptions = {|
    center?: LngLatLike,
    zoom?: number,
    bearing?: number,
    pitch?: number,
    around?: LngLatLike,
  |};

  declare type PaddingOptions = {|
    top: number,
    bottom: number,
    left: number,
    right: number,
  |};

  declare type FitBoundsOptions = {|
    /* :: ...AnimationOptions, */
    /* :: ...CameraOptions, */
    padding?: number | PaddingOptions,
    linear?: boolean,
    easing?: Function,
    offset?: PointLike,
    maxZoom?: number,
  |};

  declare type EaseToOptions = {|
    /* :: ...AnimationOptions, */
    /* :: ...CameraOptions, */
  |};

  declare type FlyToOptions = {|
    /* :: ...AnimationOptions, */
    /* :: ...CameraOptions, */
      curve?: number,
      minZoom?: number,
      speed?: number,
      screenSpeed?: number,
  |};

  declare export class BoxZoomHandler {
    constructor(map: Map): this;
    isEnabled(): boolean;
    isActive(): boolean;
    enable(): void;
    disable(): void;
  }

  declare type ScrollZoomHandlerOptions = {|
    around?: 'center',
  |};

  declare export class ScrollZoomHandler {
    constructor(map: Map): this;
    isEnabled(): boolean;
    enable(options?: ScrollZoomHandlerOptions): void;
    disable(): void;
  }

  declare export class DragPanHandler {
    constructor(map: Map): this;
    isEnabled(): boolean;
    isActive(): boolean;
    enable(): void;
    disable(): void;
  }

  declare type DragRotateHandlerOptions = {|
    bearingSnap?: number,
    pitchWithRotate?: boolean,
  |};

  declare export class DragRotateHandler {
    constructor(map: Map, options?: DragRotateHandlerOptions): this;
    isEnabled(): boolean;
    isActive(): boolean;
    enable(): void;
    disable(): void;
  }

  declare export class KeyboardHandler {
    constructor(map: Map): this;
    isEnabled(): boolean;
    enable(): void;
    disable(): void;
  }

  declare export class DoubleClickZoomHandler {
    constructor(map: Map): this;
    isEnabled(): boolean;
    enable(): void;
    disable(): void;
  }

  declare type TouchZoomRotateHandlerOptions = {|
    around?: 'center',
  |};

  declare export class TouchZoomRotateHandler {
    constructor(map: Map): this;
    isEnabled(): boolean;
    enable(options?: TouchZoomRotateHandlerOptions): void;
    disable(): void;
    disableRotation(): void;
    enableRotation(): void;
  }

  declare export class Map {
    constructor(opts: MapOptions): this;

    addControl(control: IControl, position?: Position): this;
    removeControl(control: IControl): this;

    addClass(klass: string, opts?: ClassChangeOptions): this;
    removeClass(klass: string, opts?: ClassChangeOptions): this;
    setClasses(klasses: Array<string>, opts?: ClassChangeOptions): this;
    hasClass(klass: string): boolean;
    getClasses(): Array<string>;

    resize(): this;

    getBounds(): LngLatBounds;
    setMaxBounds(bounds: ?LngLatBoundsLike): this;
    setMinZoom(minZoom: ?number): this;
    getMinZoom(): number;
    setMaxZoom(maxZoom: ?number): this;
    getMaxZoom(): number;

    project(lngLat: LngLatLike): Point;
    unproject(point: PointLike): LngLat;

    on(type: string, listener: Function): this;
    on(type: string, layer: string, listener: Function): this;
    off(type: string, listener: Function): this;
    off(type: string, layer: string, listener: Function): this;

    setStyle(style: Object | string, opts?: { diff?: boolean }): this;
    getStyle(): Object;
    isStyleLoaded(): boolean;
    addSource(id: string, source: Object): this;
    isSourceLoaded(id: string): boolean;
    areTilesLoaded(): boolean;
    removeSource(id: string): this;
    getSource(id: string): ?Object;

    addImage(name: string, image: HTMLImageElement | Uint8ClampedArray, opts?: ImageOptions): void;
    removeImage(name: string): void;
    loadImage(url: string, callback: Function): void;

    addLayer(layer: Object, before?: string): this;
    moveLayer(id: string, beforeId?: string): this;
    removeLayer(id: string): this;
    getLayer(id: string): Object;
    setFilter(layer: string, filter: Array<mixed>): this;
    setLayerZoomRange(layerId: string, minzoom: number, maxzoom: number): this;
    getFilter(layer: string): Array<mixed>;
    setPaintProperty(layer: string, name: string, value: mixed, klass?: string): this;
    getPaintProperty(layer: string, name: string, klass?: string): mixed;
    setLayoutProperty(layer: string, name: string, value: mixed): this;
    getLayoutProperty(layer: string, name: string): mixed;

    setLight(options: Object, lightOptions: mixed): this;
    getLight(): Object;

    getContaner(): HTMLElement;
    getCanvasContainer(): HTMLElement;
    getCanvas(): HTMLCanvasElement;

    loaded(): boolean;
    remove(): void;

    showTileBoundaries: boolean;
    showCollisionBoxes: boolean;
    repaint: boolean;

    getCenter(): LngLat;
    setCenter(center: LngLatLike, eventData?: Object): this;
    panBy(offset: [number, number], options?: AnimationOptions, eventData?: Object): this;
    panTo(lngLat: LngLatLike, options?: AnimationOptions, eventData?: Object): this;

    getZoom(): number;
    setZoom(zoom: number, eventData?: Object): this;
    zoomTo(zoom: number, options?: AnimationOptions, eventData?: Object): this;
    zoomIn(options?: AnimationOptions, eventData?: Object): this;
    zoomOut(options?: AnimationOptions, eventData?: Object): this;

    getBearing(): number;
    setBearing(bearing: number, eventData?: Object): this;
    rotateTo(bearing: number, options?: AnimationOptions, eventData?: Object): this;
    resetNorth(options?: AnimationOptions, eventData?: Object): this;
    snapToNorth(options?: AnimationOptions, eventData?: Object): this;

    getPitch(): number;
    setPitch(pitch: number, eventData?: Object): this;

    fitBounds(bounds: LngLatBoundsLike, options?: FitBoundsOptions, eventData?: Object): this;
    jumpTo(options: CameraOptions, eventData?: Object): this;
    easeTo(options: EaseToOptions, eventData?: Object): this;
    flyTo(options: FlyToOptions, eventData?: Object): this;

    isMoving(): boolean;
    stop(): this;

    boxZoom: BoxZoomHandler;
    doubleClickZoom: DoubleClickZoomHandler;
    dragPan: DragPanHandler;
    dragRotate: DragRotateHandler;
    keyboard: KeyboardHandler;
    scrollZoom: ScrollZoomHandler;
    touchZoomRotate: TouchZoomRotateHandler;
  }

  declare export class Popup {
  }

  declare type MarkerOptions = {|
    offset?: PointLike,
  |}

  declare export class Marker {
    constructor(element?: ?HTMLElement, options?: MarkerOptions): this;
    addTo(map: Map): this;
    remove(): this;
    getElement(): HTMLElement;
    getLngLat(): LngLat;
    setLngLat(lnglat: LngLat): this;
    setPopup(popup?: ?Popup): this;
    getPopup(): ?Popup;
    togglePopup(): this;
  }
}
