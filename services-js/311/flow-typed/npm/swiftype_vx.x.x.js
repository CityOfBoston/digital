// flow-typed signature: 2cbe28d97ff571b46c6768d5fe8941c8
// flow-typed version: <<STUB>>/swiftype_v0.3.1/flow_v0.42.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'swiftype'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

declare module 'swiftype' {
  declare type Config = {
    protocol?: string,
    host?: string,
    apiKey: string,
  };

  declare export type Field =
    { type: 'string', name: string, value: string } |
    { type: 'text', name: string, value: string } |
    { type: 'enum', name: string, value: string } |
    { type: 'integer', name: string, value: number } |
    { type: 'float', name: string, value: number } |
    { type: 'date', name: string, value: string } |
    { type: 'location', name: string, value: { lat: ?number, lon: ?number } };

  declare export type Document = {
    external_id: string,
    fields: Field[],
  }

  declare export type SearchInfo = {
    query: string,
    current_page: number,
    num_pages: number,
    per_page: number,
    total_result_count: number,
    facets: {[fieldName: string]: {[value: string]: number}},
  }

  declare export type SearchResults = {
    record_count: number,
    records: { [documentType: string]: Object[] },
    info: { [documentType: string]: SearchInfo },
    errors: Object,
  }

  declare export default class Swiftype {
    constructor(config: Config): this;

    documentTypes: {|
      search: (params: {
        engine: string,
        documentType: string,
        q: string,
      }, callback: (err: ?mixed, result: ?SearchResults) => void) => void,
    |};

    documents: {|
      list: (params: {
        engine: string,
        documentType: string,
      }, callback: (err: ?mixed, result: ?mixed) => void) => void,

      get: (params: {
        engine: string,
        documentType: string,
        externalId: string,
      }, callback: (err: ?mixed, result: ?mixed) => void) => void,

      create: (params: {
        engine: string,
        documentType: string,
        document: Document,
      }, callback: (err: ?mixed, result: ?mixed) => void) => void,

      bulkCreate: (params: {
        engine: string,
        documentType: string,
        documents: Document[],
      }, callback: (err: ?mixed, result: ?(boolean[])) => void) => void,

      batchCreate: (params: {
        engine: string,
        documentType: string,
      }, documents: Document[], batchSize: number, callback: (err: ?mixed, result: ?mixed) => void) => void,

      update: (params: {
        engine: string,
        documentType: string,
        externalId: string,
        fields: {[name: string]: mixed},
      }, callback: (err: ?mixed, result: ?mixed) => void) => void,

      destroy: (params: {
        engine: string,
        documentType: string,
        externalId: string,
      }, callback: (err: ?mixed, result: ?mixed) => void) => void,

      bulkDestroy: (params: {
        engine: string,
        documentType: string,
        documents: string[],
      }, callback: (err: ?mixed, result: ?(boolean[])) => void) => void,
    |};
  }
}
